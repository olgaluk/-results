{"version":3,"sources":["logo.svg","Select.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","mentorAllInfo","tableTemplate","mentorName","options","data","map","elem","value","String","gitHubMentor","toLowerCase","label","findRightObjMentor","mentor","find","getTableScore","mentorObj","students","githubStudent","tasks","nameTask","tableScoreBody","i","length","concat","_loop","color","status","taskName","j","colorTask","taskProven","task","replace","react_default","a","createElement","contentEditable","dangerouslySetInnerHTML","__html","Mentor","state","selectedOption","handleChange","_this","setState","props","updateMentor","nameMentor","localStorage","setItem","JSON","stringify","this","parse","getItem","react_select_esm","onChange","className","React","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","src","logo","alt","Select_Mentor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5aed6f64.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport Select from 'react-select';\nimport './Select.css';\nimport data from './data.json';\n\nconst options = data.map((elem) => {\n  return {\n    value: String(elem.gitHubMentor).toLowerCase(),\n    label: elem.gitHubMentor\n  };\n})\n\nconst findRightObjMentor = (mentor) => {\n  return data.find((elem) => {\n    return elem.gitHubMentor.toLowerCase() === mentor\n  })\n}\n\nconst getTableScore = (mentorObj) => {\n  const students = mentorObj.students.map(elem => elem.githubStudent);\n  const tasks = mentorObj.tasks.map(elem => elem.nameTask);\n  let tableScoreBody = '<tbody>';\n  tableScoreBody += '<tr key={key}>';\n  tableScoreBody += `<td></td>`;\n  for (let i = 0; i < students.length; i += 1) {\n    tableScoreBody += `<td>${students[i]}</td>`;\n  }\n  tableScoreBody += '</tr>';\n  for (let i = 0; i < tasks.length; i += 1) {\n    tableScoreBody += `<tr key={key-${i}}>`;\n    let color = mentorObj.tasks[i].status;\n    const taskName = mentorObj.tasks[i].nameTask;\n    if (color === \"Checked\") {\n      color = \"seen\";\n    }\n    tableScoreBody += `<td ${color}>${tasks[i]}</td>`;\n\n    for (let j = 0; j < students.length; j += 1) {\n      let colorTask = mentorObj.tasks[i].status;\n      if (mentorObj.students[j].taskProven) {\n        const comparisonResult = mentorObj.students[j].taskProven.find((task) => {\n          return task.replace(/\\s/gi,\"\").replace(/[^ a-z\\d]/gi,\"\") === taskName.replace(/\\s/gi,\"\").replace(/[^ a-z\\d]/gi,\"\");\n        })\n        if (comparisonResult) {\n          colorTask = \"seen\";\n        };\n      }\n      tableScoreBody += `<td ${colorTask}></td>`;\n    }\n    tableScoreBody += '</tr>';\n  }\n  tableScoreBody += '</tbody>';\n\n  return (\n    <table contentEditable='false' dangerouslySetInnerHTML={{ __html: tableScoreBody }}></table>\n  );\n}\n\nlet mentorAllInfo;\nlet tableTemplate;\nlet mentorName;\n\nexport default class Mentor extends React.Component {\n  state = {\n    selectedOption: null,\n    mentor: null\n  }\n\n  handleChange = (selectedOption) => {\n    const mentor = selectedOption.value;\n    this.setState({ mentor: mentor });\n    this.setState({ selectedOption });\n    this.props.updateMentor(this.state.mentor);\n    mentorAllInfo = findRightObjMentor(mentor);\n    mentorName = mentorAllInfo.nameMentor;\n    tableTemplate = getTableScore(mentorAllInfo);\n  }\n\n  componentWillUnmount() {\n    localStorage.setItem('mentor', JSON.stringify(this.state.mentor));\n  }\n\n  componentWillMount() {\n    const value = JSON.parse(localStorage.getItem('mentor'));\n    if (value) {\n      this.setState({ mentor: value });\n      mentorAllInfo = findRightObjMentor(value);\n      this.props.updateMentor(value);\n      mentorName = mentorAllInfo.nameMentor;\n      this.setState({ selectedOption: { value: `${value}`, label: `${mentorAllInfo.gitHubMentor}` } });\n      tableTemplate = getTableScore(mentorAllInfo);\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('mentor', JSON.stringify(this.state.mentor));\n  }\n\n  render() {\n    const { selectedOption } = this.state;\n\n    return (\n      <div>\n        <Select\n          value={selectedOption}\n          onChange={this.handleChange}\n          options={options}\n          className=\"select\"\n        />\n        <h2>Mentor: {mentorName}</h2>\n        <div>\n          {tableTemplate}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Select from './Select';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mentor: null\n    };\n\n    this.setState = this.setState.bind(this);\n  }\n\n  updateMentor = (value) => {\n    this.setState({ mentor: value })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>rss-mentor-dashboard</h2>\n        </header>\n        <main>\n          <Select updateMentor={this.updateMentor.bind(this)} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}